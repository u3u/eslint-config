// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`should match snapshots > base.tsx 1`] = `
"/// <reference types=\\"eslint\\" />
import { join } from 'node:path';

export const arr = [
  // start
  1,
  // 2,
  3,
];

export const getUser = async () => {
  return null;
};

switch ('') {
  case '': {
    break;
  }

  default: {
    break;
  }
}

const ovo = 'ovo';
const ouo = 'ouo';

const qwq = {
  name: 'qwq',
};

const owo = 'owo';
const { a, b, c } = obj;

'abc'.replace(/a(?<foo>b)c/u, '$<foo>');

// NOTE
class Foo {
  b = 'bar';

  constructor() {}

  static a() {}

  c() {}

  d() {}

  z() {}
}

/* REVIEW */
interface ExampleObject {
  '0'?: any;
  a?: any;
  // b?: any;
  exampleNestedObject: ExampleNestedObject;
  z: number;
}

interface ExampleNestedObject {
  a?: any;
  z?: any;
}

const render = () => {
  return (
    <Foo
      // d=\\"\\"
      z
      // test={{}}
      data-ignore=\\"\\"
      bar={[]}
    />
  );
};
export const obj = {
  /* start */
  a: '',

  b: () => 'b',

  c: {},
};
const FC = () => <Foo />;
const Fragment = () => <></>;

const getCurrentUser = () => getUser();
"
`;

exports[`should match snapshots > test.astro 1`] = `
"---
import { join } from 'node:path';
import type { HTMLAttributes } from 'astro/types';

interface Props extends HTMLAttributes<'div'> {}

export const arr = [];

export const obj = {
  a: '',

  b: () => 'b',

  c: {},
};

switch ('') {
  case '': {
    break;
  }

  default: {
    break;
  }
}

const ovo = 'ovo';
const ouo = 'ouo';

const qwq = {
  name: 'qwq',
};

const owo = 'owo';
const { a, b, c } = obj;

'abc'.replace(/a(?<foo>b)c/u, '$<foo>');
class Foo {
  b = 'bar';

  constructor() {}

  static a() {}

  c() {}
}
---
"
`;

exports[`should match snapshots > test.js 1`] = `
"import { join } from 'node:path';

export const arr = [];

export const obj = {
  a: '',

  b: () => 'b',

  c: {},
};

switch ('') {
  case '': {
    break;
  }

  default: {
    break;
  }
}

const ovo = 'ovo';
const ouo = 'ouo';

const qwq = {
  name: 'qwq',
};

const owo = 'owo';
const { a, b, c } = obj;

'abc'.replace(/a(?<foo>b)c/u, '$<foo>');
class Foo {
  b = 'bar';

  constructor() {}

  static a() {}

  c() {}
}
"
`;

exports[`should match snapshots > test.json 1`] = `
"{
  \\"0\\": null,
  \\"a\\": null,
  \\"b\\": null,

  \\"exampleNestedObject\\": {
    \\"a\\": null,
    \\"z\\": null
  },

  \\"z\\": 100000
}
"
`;

exports[`should match snapshots > test.md 1`] = `
"\`\`\`ts
import { join } from 'node:path';

export const arr = [];

export const obj = {
  a: '',

  b: () => 'b',

  c: {},
};

switch ('') {
  case '': {
    break;
  }

  default: {
    break;
  }
}

const ovo = 'ovo';
const ouo = 'ouo';

const qwq = {
  name: 'qwq',
};

const owo = 'owo';
const { a, b, c } = obj;

'abc'.replace(/a(?<foo>b)c/u, '$<foo>');
class Foo {
  b = 'bar';

  constructor() {}

  static a() {}

  c() {}
}
\`\`\`
"
`;

exports[`should match snapshots > test.vue 1`] = `
"<script>
import { join } from 'node:path';

export const arr = [];

export const obj = {
  a: '',

  b: () => 'b',

  c: {},
};

switch ('') {
  case '': {
    break;
  }

  default: {
    break;
  }
}

const ovo = 'ovo';
const ouo = 'ouo';

const qwq = {
  name: 'qwq',
};

const owo = 'owo';
const { a, b, c } = obj;

'abc'.replace(/a(?<foo>b)c/u, '$<foo>');
class Foo {
  b = 'bar';

  constructor() {}

  static a() {}

  c() {}
}
</script>
"
`;
